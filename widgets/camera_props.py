import time
import tkinter as tk
import cv2 as cv
# internal
from frames.scrollable import ScrollFrame


class CameraProps(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.title = "CameraProps Page"

        # add a new scrollable frame.
        self.scrollFrame = ScrollFrame(self)
        self.scrollFrame.grid(row=0, column=0)
        lb_fps0 = tk.Label(self.scrollFrame.viewPort, text="FPS")
        lb_fps0.grid(row=0, column=0)
        self.lb_fps = tk.Label(self.scrollFrame.viewPort)
        self.lb_fps.grid(row=0, column=1)
        lb_hue0 = tk.Label(self.scrollFrame.viewPort, text="HUE")
        lb_hue0.grid(row=1, column=0)
        self.lb_hue = tk.Label(self.scrollFrame.viewPort)
        self.lb_hue.grid(row=1, column=1)
        lb_pan0 = tk.Label(self.scrollFrame.viewPort, text="PAN")
        lb_pan0.grid(row=2, column=0)
        self.lb_pan = tk.Label(self.scrollFrame.viewPort)
        self.lb_pan.grid(row=2, column=1)
        lb_gain0 = tk.Label(self.scrollFrame.viewPort, text="GAIN")
        lb_gain0.grid(row=3, column=0)
        self.lb_gain = tk.Label(self.scrollFrame.viewPort)
        self.lb_gain.grid(row=3, column=1)
        lb_mode0 = tk.Label(self.scrollFrame.viewPort, text="MODE")
        lb_mode0.grid(row=4, column=0)
        self.lb_mode = tk.Label(self.scrollFrame.viewPort)
        self.lb_mode.grid(row=4, column=1)
        lb_zoom0 = tk.Label(self.scrollFrame.viewPort, text="ZOOM")
        lb_zoom0.grid(row=5, column=0)
        self.lb_zoom = tk.Label(self.scrollFrame.viewPort)
        self.lb_zoom.grid(row=5, column=1)
        lb_guid0 = tk.Label(self.scrollFrame.viewPort, text="GUID")
        lb_guid0.grid(row=6, column=0)
        self.lb_guid = tk.Label(self.scrollFrame.viewPort)
        self.lb_guid.grid(row=6, column=1)
        lb_tilt0 = tk.Label(self.scrollFrame.viewPort, text="TILT")
        lb_tilt0.grid(row=7, column=0)
        self.lb_tilt = tk.Label(self.scrollFrame.viewPort)
        self.lb_tilt.grid(row=7, column=1)
        lb_iris0 = tk.Label(self.scrollFrame.viewPort, text="IRIS")
        lb_iris0.grid(row=8, column=0)
        self.lb_iris = tk.Label(self.scrollFrame.viewPort)
        self.lb_iris.grid(row=8, column=1)
        lb_roll0 = tk.Label(self.scrollFrame.viewPort, text="ROLL")
        lb_roll0.grid(row=9, column=0)
        self.lb_roll = tk.Label(self.scrollFrame.viewPort)
        self.lb_roll.grid(row=9, column=1)
        lb_focus0 = tk.Label(self.scrollFrame.viewPort, text="FOCUS")
        lb_focus0.grid(row=10, column=0)
        self.lb_focus = tk.Label(self.scrollFrame.viewPort)
        self.lb_focus.grid(row=10, column=1)
        lb_gamma0 = tk.Label(self.scrollFrame.viewPort, text="GAMMA")
        lb_gamma0.grid(row=11, column=0)
        self.lb_gamma = tk.Label(self.scrollFrame.viewPort)
        self.lb_gamma.grid(row=11, column=1)
        lb_format0 = tk.Label(self.scrollFrame.viewPort, text="FORMAT")
        lb_format0.grid(row=12, column=0)
        self.lb_format = tk.Label(self.scrollFrame.viewPort)
        self.lb_format.grid(row=12, column=1)
        lb_fourcc0 = tk.Label(self.scrollFrame.viewPort, text="FOURCC")
        lb_fourcc0.grid(row=13, column=0)
        self.lb_fourcc = tk.Label(self.scrollFrame.viewPort)
        self.lb_fourcc.grid(row=13, column=1)
        lb_trigger0 = tk.Label(self.scrollFrame.viewPort, text="TRIGGER")
        lb_trigger0.grid(row=14, column=0)
        self.lb_trigger = tk.Label(self.scrollFrame.viewPort)
        self.lb_trigger.grid(row=14, column=1)
        lb_settings0 = tk.Label(self.scrollFrame.viewPort, text="SETTINGS")
        lb_settings0.grid(row=15, column=0)
        self.lb_settings = tk.Label(self.scrollFrame.viewPort)
        self.lb_settings.grid(row=15, column=1)
        lb_exposure0 = tk.Label(self.scrollFrame.viewPort, text="EXPOSURE")
        lb_exposure0.grid(row=16, column=0)
        self.lb_exposure = tk.Label(self.scrollFrame.viewPort)
        self.lb_exposure.grid(row=16, column=1)
        lb_contrast0 = tk.Label(self.scrollFrame.viewPort, text="CONTRAST")
        lb_contrast0.grid(row=17, column=0)
        self.lb_contrast = tk.Label(self.scrollFrame.viewPort)
        self.lb_contrast.grid(row=17, column=1)
        lb_pos_msec0 = tk.Label(self.scrollFrame.viewPort, text="POS MSEC")
        lb_pos_msec0.grid(row=18, column=0)
        self.lb_pos_msec = tk.Label(self.scrollFrame.viewPort)
        self.lb_pos_msec.grid(row=18, column=1)
        lb_sharpness0 = tk.Label(self.scrollFrame.viewPort, text="SHARPNESS")
        lb_sharpness0.grid(row=19, column=0)
        self.lb_sharpness = tk.Label(self.scrollFrame.viewPort)
        self.lb_sharpness.grid(row=19, column=1)
        lb_iso_speed0 = tk.Label(self.scrollFrame.viewPort, text="ISO SPEED")
        lb_iso_speed0.grid(row=20, column=0)
        self.lb_iso_speed = tk.Label(self.scrollFrame.viewPort)
        self.lb_iso_speed.grid(row=20, column=1)
        lb_backlight0 = tk.Label(self.scrollFrame.viewPort, text="BACKLIGHT")
        lb_backlight0.grid(row=21, column=0)
        self.lb_backlight = tk.Label(self.scrollFrame.viewPort)
        self.lb_backlight.grid(row=21, column=1)
        lb_buffersize0 = tk.Label(self.scrollFrame.viewPort, text="BUFFERSIZE")
        lb_buffersize0.grid(row=22, column=0)
        self.lb_buffersize = tk.Label(self.scrollFrame.viewPort)
        self.lb_buffersize.grid(row=22, column=1)
        lb_saturation0 = tk.Label(self.scrollFrame.viewPort, text="SATURATION")
        lb_saturation0.grid(row=23, column=0)
        self.lb_saturation = tk.Label(self.scrollFrame.viewPort)
        self.lb_saturation.grid(row=23, column=1)
        lb_monochrome0 = tk.Label(self.scrollFrame.viewPort, text="MONOCHROME")
        lb_monochrome0.grid(row=24, column=0)
        self.lb_monochrome = tk.Label(self.scrollFrame.viewPort)
        self.lb_monochrome.grid(row=24, column=1)
        lb_brightness0 = tk.Label(self.scrollFrame.viewPort, text="BRIGHTNESS")
        lb_brightness0.grid(row=25, column=0)
        self.lb_brightness = tk.Label(self.scrollFrame.viewPort)
        self.lb_brightness.grid(row=25, column=1)
        lb_pos_frames0 = tk.Label(self.scrollFrame.viewPort, text="POS FRAMES")
        lb_pos_frames0.grid(row=26, column=0)
        self.lb_pos_frames = tk.Label(self.scrollFrame.viewPort)
        self.lb_pos_frames.grid(row=26, column=1)
        lb_convert_rgb0 = tk.Label(self.scrollFrame.viewPort, text="CONVERT RGB")
        lb_convert_rgb0.grid(row=27, column=0)
        self.lb_convert_rgb = tk.Label(self.scrollFrame.viewPort)
        self.lb_convert_rgb.grid(row=27, column=1)
        lb_frame_count0 = tk.Label(self.scrollFrame.viewPort, text="FRAME COUNT")
        lb_frame_count0.grid(row=28, column=0)
        self.lb_frame_count = tk.Label(self.scrollFrame.viewPort)
        self.lb_frame_count.grid(row=28, column=1)
        lb_temperature0 = tk.Label(self.scrollFrame.viewPort, text="TEMPERATURE")
        lb_temperature0.grid(row=29, column=0)
        self.lb_temperature = tk.Label(self.scrollFrame.viewPort)
        self.lb_temperature.grid(row=29, column=1)
        lb_frame_width0 = tk.Label(self.scrollFrame.viewPort, text="FRAME WIDTH")
        lb_frame_width0.grid(row=30, column=0)
        self.lb_frame_width = tk.Label(self.scrollFrame.viewPort)
        self.lb_frame_width.grid(row=30, column=1)
        lb_frame_height0 = tk.Label(self.scrollFrame.viewPort, text="FRAME HEIGHT")
        lb_frame_height0.grid(row=31, column=0)
        self.lb_frame_height = tk.Label(self.scrollFrame.viewPort)
        self.lb_frame_height.grid(row=31, column=1)
        lb_rectification0 = tk.Label(self.scrollFrame.viewPort, text="RECTIFICATION")
        lb_rectification0.grid(row=32, column=0)
        self.lb_rectification = tk.Label(self.scrollFrame.viewPort)
        self.lb_rectification.grid(row=32, column=1)
        lb_auto_exposure0 = tk.Label(self.scrollFrame.viewPort, text="AUTO EXPOSURE")
        lb_auto_exposure0.grid(row=33, column=0)
        self.lb_auto_exposure = tk.Label(self.scrollFrame.viewPort)
        self.lb_auto_exposure.grid(row=33, column=1)
        lb_pos_avi_ratio0 = tk.Label(self.scrollFrame.viewPort, text="POS AVI RATIO")
        lb_pos_avi_ratio0.grid(row=34, column=0)
        self.lb_pos_avi_ratio = tk.Label(self.scrollFrame.viewPort)
        self.lb_pos_avi_ratio.grid(row=34, column=1)
        lb_trigger_delay0 = tk.Label(self.scrollFrame.viewPort, text="TRIGGER DELAY")
        lb_trigger_delay0.grid(row=35, column=0)
        self.lb_trigger_delay = tk.Label(self.scrollFrame.viewPort)
        self.lb_trigger_delay.grid(row=35, column=1)
        lb_white_balance_red0 = tk.Label(self.scrollFrame.viewPort,text="WHITE BALANCE RED")
        lb_white_balance_red0.grid(row=36, column=0)
        self.lb_white_balance_red = tk.Label(self.scrollFrame.viewPort)
        self.lb_white_balance_red.grid(row=36, column=1)
        lb_white_balance_blue0 = tk.Label(self.scrollFrame.viewPort,text="WHITE BALANCE BLUE")
        lb_white_balance_blue0.grid(row=37, column=0)
        self.lb_white_balance_blue = tk.Label(self.scrollFrame.viewPort)
        self.lb_white_balance_blue.grid(row=37, column=1)
        lb_autofocus0 = tk.Label(self.scrollFrame.viewPort,text="AUTO FOCUS")
        lb_autofocus0.grid(row=38, column=0)
        self.lb_autofocus = tk.Label(self.scrollFrame.viewPort)
        self.lb_autofocus.grid(row=38, column=1)

    def update_cam_props(self, *args, **kwargs):
        if 'vid' in kwargs:
            vid = kwargs['vid']
            self.lb_fps.config(text=vid.get(cv.CAP_PROP_FPS))
            self.lb_hue.config(text=vid.get(cv.CAP_PROP_HUE))
            self.lb_pan.config(text=vid.get(cv.CAP_PROP_PAN))
            self.lb_gain.config(text=vid.get(cv.CAP_PROP_GAIN))
            self.lb_mode.config(text=vid.get(cv.CAP_PROP_MODE))
            self.lb_zoom.config(text=vid.get(cv.CAP_PROP_ZOOM))
            self.lb_guid.config(text=vid.get(cv.CAP_PROP_GUID))
            self.lb_tilt.config(text=vid.get(cv.CAP_PROP_TILT))
            self.lb_iris.config(text=vid.get(cv.CAP_PROP_IRIS))
            self.lb_roll.config(text=vid.get(cv.CAP_PROP_ROLL))
            self.lb_focus.config(text=vid.get(cv.CAP_PROP_FOCUS))
            self.lb_gamma.config(text=vid.get(cv.CAP_PROP_GAMMA))
            self.lb_format.config(text=vid.get(cv.CAP_PROP_FORMAT))
            self.lb_fourcc.config(text=vid.get(cv.CAP_PROP_FOURCC))
            self.lb_trigger.config(text=vid.get(cv.CAP_PROP_TRIGGER))
            self.lb_settings.config(text=vid.get(cv.CAP_PROP_SETTINGS))
            self.lb_exposure.config(text=vid.get(cv.CAP_PROP_EXPOSURE))
            self.lb_contrast.config(text=vid.get(cv.CAP_PROP_CONTRAST))
            self.lb_pos_msec.config(text=vid.get(cv.CAP_PROP_POS_MSEC))
            self.lb_sharpness.config(text=vid.get(cv.CAP_PROP_SHARPNESS))
            self.lb_iso_speed.config(text=vid.get(cv.CAP_PROP_SPEED))
            self.lb_backlight.config(text=vid.get(cv.CAP_PROP_BACKLIGHT))
            self.lb_buffersize.config(text=vid.get(cv.CAP_PROP_BUFFERSIZE))
            self.lb_saturation.config(text=vid.get(cv.CAP_PROP_SATURATION))
            self.lb_monochrome.config(text=vid.get(cv.CAP_PROP_MONOCHROME))
            self.lb_brightness.config(text=vid.get(cv.CAP_PROP_BRIGHTNESS))
            self.lb_pos_frames.config(text=vid.get(cv.CAP_PROP_POS_FRAMES))
            self.lb_convert_rgb.config(text=vid.get(cv.CAP_PROP_CONVERT_RGB))
            self.lb_frame_count.config(text=vid.get(cv.CAP_PROP_FRAME_COUNT))
            self.lb_temperature.config(text=vid.get(cv.CAP_PROP_TEMPERATURE))
            self.lb_frame_width.config(text=vid.get(cv.CAP_PROP_FRAME_WIDTH))
            self.lb_frame_height.config(text=vid.get(cv.CAP_PROP_FRAME_HEIGHT))
            self.lb_rectification.config(text=vid.get(cv.CAP_PROP_RECTIFICATION))
            self.lb_auto_exposure.config(text=vid.get(cv.CAP_PROP_AUTO_EXPOSURE))
            self.lb_pos_avi_ratio.config(text=vid.get(cv.CAP_PROP_POS_AVI_RATIO))
            self.lb_trigger_delay.config(text=vid.get(cv.CAP_PROP_TRIGGER_DELAY))
            self.lb_white_balance_red.config(text=vid.get(cv.CAP_PROP_WHITE_BALANCE_RED_V))
            self.lb_white_balance_blue.config(text=vid.get(cv.CAP_PROP_WHITE_BALANCE_BLUE_U))
            self.lb_autofocus.config(text=vid.get(cv.CAP_PROP_AUTOFOCUS))


